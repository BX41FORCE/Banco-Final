/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package banco.views;

import banco.dao.ClientesDAO;
import banco.dao.CuentasDAO;
import banco.dao.EmpleadosDAO;
import banco.dao.OperacionesDAO;
import banco.dao.PersonasDAO;
import banco.dao.ReportesDAO;
import banco.vo.Personas;
import banco.vo.Clientes;
import banco.vo.Cuentas;
import banco.vo.Empleados;
import banco.vo.Operaciones;
import banco.vo.Reportes;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author bcortez
 */
public class index extends javax.swing.JFrame {

    PersonasDAO miPersonaDAO;
    CuentasDAO miCuentaDAO;
    ClientesDAO miClienteDAO;
    EmpleadosDAO miEmpleadoDAO;
    OperacionesDAO miOperacionDAO;
    ReportesDAO miReporteDAO;

    String id_cuenta = "";
    String id_persona = "";
    String id_cliente = "";
    String saldo = "";
    String Tipo = "";
    String NombreCliente = "";

    /**
     * Creates new form index
     */
    public index() {
        initComponents();
        this.setLocationRelativeTo(null);
        miOperacionDAO = new OperacionesDAO();
        miReporteDAO = new ReportesDAO();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        nombreCliente = new javax.swing.JTextField();
        apellidoCliente = new javax.swing.JTextField();
        guardar = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        tipoCuenta = new javax.swing.JComboBox<>();
        fechaCliente = new com.toedter.calendar.JDateChooser();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        numeroCuenta = new javax.swing.JTextField();
        depositante = new javax.swing.JTextField();
        valor = new javax.swing.JSpinner();
        tipoTransaccion = new javax.swing.JComboBox<>();
        transaccion = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        empleadoSeleccion = new javax.swing.JComboBox<>();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        verTodo = new javax.swing.JButton();
        tipoTransaccionB = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        numeroCuentaB = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        tipoCuentaB = new javax.swing.JComboBox<>();
        empleadoSeleccionB = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        valorTotal = new javax.swing.JTextPane();
        limpiarFiltros = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        totalRetiro = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        totalDeposito = new javax.swing.JTextPane();
        jLabel23 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        eNombre = new javax.swing.JTextField();
        eApellido = new javax.swing.JTextField();
        Regsitrar_Empleado = new javax.swing.JButton();
        cancelarEmpleado = new javax.swing.JButton();
        eFecha = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Registro", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 24), new java.awt.Color(0, 80, 136))); // NOI18N

        jLabel2.setText("Nombre");

        jLabel3.setText("Apellido");

        jLabel4.setText("Fecha Nacimiento");

        guardar.setBackground(new java.awt.Color(33, 123, 74));
        guardar.setForeground(new java.awt.Color(255, 255, 255));
        guardar.setText("Registrar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        cancelar.setBackground(new java.awt.Color(187, 26, 41));
        cancelar.setForeground(new java.awt.Color(255, 255, 255));
        cancelar.setText("Cancelar");

        jLabel5.setText("Tipo de Cuenta");

        tipoCuenta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Cta.Ahorros", "Cta.Corriente" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(fechaCliente, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tipoCuenta, 0, 215, Short.MAX_VALUE)
                        .addComponent(nombreCliente, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(apellidoCliente, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(apellidoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel4))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fechaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tipoCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardar)
                    .addComponent(cancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(30, 80, 109));

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Registro de Clientes");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(511, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Registro de Clientes", jPanel1);

        jPanel5.setBackground(new java.awt.Color(30, 80, 109));

        jLabel6.setFont(new java.awt.Font("Ubuntu", 0, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Transacciones");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ingrese los datos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 24), new java.awt.Color(0, 80, 136))); // NOI18N

        jLabel7.setText("Número de Cuenta");

        jLabel8.setText("Tipo de Transaccion");

        jLabel9.setText("Nombre de la Persona");

        jLabel10.setText("Valor de la Transacción");

        tipoTransaccion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Depósito", "Retiro" }));

        transaccion.setText("Realizar Transacción");
        transaccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transaccionActionPerformed(evt);
            }
        });

        jLabel19.setText("Empleado Responsable");

        empleadoSeleccion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar" }));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(transaccion, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addGap(45, 45, 45)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(tipoTransaccion, 0, 190, Short.MAX_VALUE)
                                .addComponent(empleadoSeleccion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(numeroCuenta)))
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addGap(47, 47, 47)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel9)
                                .addComponent(jLabel10))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(valor, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(depositante, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(430, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(empleadoSeleccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(tipoTransaccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(numeroCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(depositante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(valor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transaccion)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Transacciones", jPanel4);

        jPanel8.setBackground(new java.awt.Color(30, 80, 109));

        jLabel11.setFont(new java.awt.Font("Ubuntu", 0, 36)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Reportes");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Tabla);

        verTodo.setText("Ver Todas las Transacciones");
        verTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verTodoActionPerformed(evt);
            }
        });

        tipoTransaccionB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Ver Depositos", "Ver Retiros" }));

        jLabel12.setText("Tipo de Transacción");

        jButton2.setText("Buscar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel13.setText("Número de Cuenta");

        jLabel14.setText("Tipo de Cuenta");

        tipoCuentaB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Cta.Corriente", "Cta.Ahorros" }));

        empleadoSeleccionB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar" }));

        jLabel20.setText("Empleado");

        jLabel21.setText("Total de las transacciones :");

        jScrollPane2.setViewportView(valorTotal);

        limpiarFiltros.setText("Limpiar Filtros");

        jLabel22.setText("Total de Depósitos:");

        jScrollPane3.setViewportView(totalRetiro);

        jScrollPane4.setViewportView(totalDeposito);

        jLabel23.setText("Total de Retiros:");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel22)
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel23)
                        .addGap(1, 1, 1)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel20)
                                    .addComponent(jLabel13))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(numeroCuentaB)
                                    .addComponent(empleadoSeleccionB, 0, 177, Short.MAX_VALUE))
                                .addGap(16, 16, 16)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(limpiarFiltros))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addGap(21, 21, 21))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tipoTransaccionB, 0, 177, Short.MAX_VALUE)
                                    .addComponent(tipoCuentaB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, 0)
                        .addComponent(verTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numeroCuentaB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2)
                            .addComponent(limpiarFiltros))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(empleadoSeleccionB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tipoCuentaB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)
                            .addComponent(verTodo)))
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tipoTransaccionB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel21)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel23, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Reportes", jPanel7);

        jPanel10.setBackground(new java.awt.Color(30, 80, 109));

        jLabel15.setFont(new java.awt.Font("Ubuntu", 0, 36)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Registro de Empleados");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addContainerGap(463, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 24), new java.awt.Color(0, 80, 136))); // NOI18N

        jLabel16.setText("Nombre");

        jLabel17.setText("Apellido");

        jLabel18.setText("Fecha Nacimiento");

        Regsitrar_Empleado.setBackground(new java.awt.Color(33, 123, 74));
        Regsitrar_Empleado.setForeground(new java.awt.Color(255, 255, 255));
        Regsitrar_Empleado.setText("Registrar");
        Regsitrar_Empleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Regsitrar_EmpleadoActionPerformed(evt);
            }
        });

        cancelarEmpleado.setBackground(new java.awt.Color(187, 26, 41));
        cancelarEmpleado.setForeground(new java.awt.Color(255, 255, 255));
        cancelarEmpleado.setText("Cancelar");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel18)
                    .addComponent(jLabel17)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(Regsitrar_Empleado, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelarEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(eFecha, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eNombre, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                        .addComponent(eApellido, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(eNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(eApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(eFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Regsitrar_Empleado)
                    .addComponent(cancelarEmpleado))
                .addContainerGap(74, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Registro de Empleados", jPanel9);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        generarPersona();
        generarCuenta();
        generarCliente();
    }//GEN-LAST:event_guardarActionPerformed

    private void Regsitrar_EmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Regsitrar_EmpleadoActionPerformed
        generarPersona2();
        generarEmpleado();
        obtenerEmpleados();
    }//GEN-LAST:event_Regsitrar_EmpleadoActionPerformed

    private void transaccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transaccionActionPerformed
        operacion();
    }//GEN-LAST:event_transaccionActionPerformed

    private void verTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verTodoActionPerformed
        mostrar();
    }//GEN-LAST:event_verTodoActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        buscar();
    }//GEN-LAST:event_jButton2ActionPerformed
    private void generarPersona() {
        miPersonaDAO = new PersonasDAO();
        Date fecha = this.fechaCliente.getDate();
        // Transformación de la fecha a string
        String formato = "dd/MM/yyyy";
        SimpleDateFormat sdf = new SimpleDateFormat(formato);
        Personas miPersona = new Personas(this.nombreCliente.getText(), this.apellidoCliente.getText(), sdf.format(fecha));
        miPersonaDAO.registrarPersona(miPersona);
    }

    private void generarPersona2() {
        miPersonaDAO = new PersonasDAO();
        Date fecha = this.eFecha.getDate();
        // Transformación de la fecha a string
        String formato = "dd/MM/yyyy";
        SimpleDateFormat sdf = new SimpleDateFormat(formato);
        Personas miPersona = new Personas(this.eNombre.getText(), this.eApellido.getText(), sdf.format(fecha));
        miPersonaDAO.registrarPersona(miPersona);
    }

    private void generarCuenta() {
        miCuentaDAO = new CuentasDAO();
        Cuentas miCuenta = new Cuentas(0, this.tipoCuenta.getSelectedIndex());
        miCuenta.setNumeroCuenta();
        miCuentaDAO.registrarCuenta(miCuenta);
    }

    private void generarCliente() {
        id_persona = miPersonaDAO.consultarIdPersona();
        id_cuenta = miCuentaDAO.consultarIdCuenta();
        miClienteDAO = new ClientesDAO();
        Clientes miCliente = new Clientes(Integer.parseInt(id_persona), Integer.parseInt(id_cuenta));
        miClienteDAO.registrarCliente(miCliente);

    }

    private void generarEmpleado() {
        id_persona = miPersonaDAO.consultarIdPersona();
        miEmpleadoDAO = new EmpleadosDAO();
        Empleados miEmpleado = new Empleados(Integer.parseInt(id_persona));
        miEmpleado.setCodigo();
        miEmpleadoDAO.registrarEmpleado(miEmpleado);
    }

    public void obtenerEmpleados() {
        this.empleadoSeleccion.removeAllItems();
        this.empleadoSeleccionB.removeAllItems();
        this.empleadoSeleccion.addItem("Seleccionar");
        this.empleadoSeleccionB.addItem("Seleccionar");
        miEmpleadoDAO = new EmpleadosDAO();
        Personas miEmpleado;
        ArrayList<Personas> listaEmpleados = miEmpleadoDAO.listaDeEmpleados();
        if (listaEmpleados.size() > 0) {
            for (int i = 0; i < listaEmpleados.size(); i++) {
                miEmpleado = listaEmpleados.get(i);
                String Nombres = (miEmpleado.getNombre() + " " + miEmpleado.getApellido());
                this.empleadoSeleccion.addItem(Nombres);
                this.empleadoSeleccionB.addItem(Nombres);
                System.out.print(Nombres + "\n");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Actualmente no "
                    + "existen registros de empleados", "INFORMACIÓN", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void operacion() {
        id_cliente = miOperacionDAO.consultarIdCliente(this.numeroCuenta.getText());
        int valor = Integer.parseInt(this.valor.getValue().toString());
        //Validaciones de llenado de Campos
        //validaciones
        int comprobacion = 0;
        if (id_cliente == "") {
            comprobacion = 7;
        }
        if (valor <= 0) {
            comprobacion = 5;
        }
        if (this.depositante.getText().length() == 0) {
            comprobacion = 4;
        }
        if (this.numeroCuenta.getText().length() != 4) {
            comprobacion = 6;
        }
        if (this.numeroCuenta.getText().length() == 0) {
            comprobacion = 3;
        }
        if (this.tipoTransaccion.getSelectedIndex() == 0) {
            comprobacion = 2;
        }
        if (this.empleadoSeleccion.getSelectedIndex() == 0) {
            comprobacion = 1;
        }

        switch (comprobacion) {
            case 0:
                if ("Depósito".equals(this.tipoTransaccion.getSelectedItem().toString())) {
                    saldo = miOperacionDAO.comprobarSaldo(this.numeroCuenta.getText());
                    miOperacionDAO = new OperacionesDAO();
                    Operaciones miOperacion = new Operaciones(this.depositante.getText(), (int) this.valor.getValue(), Integer.parseInt(id_cliente), this.empleadoSeleccion.getSelectedIndex(), this.tipoTransaccion.getSelectedIndex());
                    int operacion = (Integer.parseInt(saldo) + Integer.parseInt(this.valor.getValue().toString()));
                    Tipo = miOperacionDAO.comprobarTipoCuenta(this.numeroCuenta.getText());
                    NombreCliente = miOperacionDAO.comprobarCliente(this.numeroCuenta.getText());
                    JOptionPane.showMessageDialog(null, "DEPÓSITO REALIZADO"
                            + "\nDepósito realizado a la cuenta N°: " + this.numeroCuenta.getText()
                            + "\nTipo: " + Tipo
                            + "\nTitular de la Cuenta: " + NombreCliente
                            + "\nHecho por:" + this.depositante.getText()
                            + "\nA cargo de:" + this.empleadoSeleccion.getSelectedItem().toString()
                            + "\nValor anterior: $" + saldo + "\nValor Depositado: $" + this.valor.getValue().toString()
                            + "\nValor del Saldo: $" + operacion);
                    Reportes miReporte = new Reportes(this.tipoTransaccion.getSelectedItem().toString(), Tipo,
                            this.numeroCuenta.getText(), NombreCliente, this.valor.getValue().toString(),
                            this.depositante.getText(), this.empleadoSeleccion.getSelectedItem().toString());
                    miReporteDAO.registrarReporte(miReporte);
                    miOperacionDAO.registrarOperacion(miOperacion);
                    miOperacionDAO.registrarSaldo(operacion, this.numeroCuenta.getText());
                    break;
                }
                if ("Retiro".equals(this.tipoTransaccion.getSelectedItem().toString())) {
                    saldo = miOperacionDAO.comprobarSaldo(this.numeroCuenta.getText());
                    if (Integer.parseInt(saldo) >= Integer.parseInt(this.valor.getValue().toString())) {
                        miOperacionDAO = new OperacionesDAO();
                        Operaciones miOperacion = new Operaciones(this.depositante.getText(), (int) this.valor.getValue(), Integer.parseInt(id_cliente), this.empleadoSeleccion.getSelectedIndex(), this.tipoTransaccion.getSelectedIndex());
                        Tipo = miOperacionDAO.comprobarTipoCuenta(this.numeroCuenta.getText());
                        NombreCliente = miOperacionDAO.comprobarCliente(this.numeroCuenta.getText());
                        int operacion = (Integer.parseInt(saldo) - Integer.parseInt(this.valor.getValue().toString()));
                        JOptionPane.showMessageDialog(null, "RETIRO REALIZADO"
                                + "\nRetiro realizado a la cuenta N°: " + this.numeroCuenta.getText()
                                + "\nTipo: " + Tipo
                                + "\nTitular de la Cuenta: " + NombreCliente
                                + "\nHecho por: " + this.depositante.getText()
                                + "\nA cargo de: " + this.empleadoSeleccion.getSelectedItem().toString()
                                + "\nValor anterior: $" + saldo + "\nValor Retirado: $" + this.valor.getValue().toString()
                                + "\nValor del Saldo: $" + operacion);
                        Reportes miReporte = new Reportes(this.tipoTransaccion.getSelectedItem().toString(), Tipo,
                                this.numeroCuenta.getText(), NombreCliente, this.valor.getValue().toString(),
                                this.depositante.getText(), this.empleadoSeleccion.getSelectedItem().toString());
                        miReporteDAO.registrarReporte(miReporte);
                        miOperacionDAO.registrarOperacion(miOperacion);
                        miOperacionDAO.registrarSaldo(operacion, this.numeroCuenta.getText());
                    } else if (Integer.parseInt(saldo) < Integer.parseInt(this.valor.getValue().toString())) {
                        JOptionPane.showMessageDialog(null, "Saldo en Cuenta Insuficiente\nLa Cuenta posee un saldo de: $" + saldo);
                    }
                    break;
                }
                break;
            case 1:
                JOptionPane.showMessageDialog(null, "Debe Seleccionar a un Empleado");
                break;
            case 2:
                JOptionPane.showMessageDialog(null, "Debe Seleccionar un Tipo de Transacción");
                break;
            case 3:
                JOptionPane.showMessageDialog(null, "Debe Ingresar un Número de Cuenta");
                break;
            case 4:
                JOptionPane.showMessageDialog(null, "Debe Ingresar el Nombre del Depositante");
                break;
            case 5:
                JOptionPane.showMessageDialog(null, "Debe Ingresar un Valor Válido");
                break;
            case 6:
                JOptionPane.showMessageDialog(null, "Debe Ingresar un Número de Cuenta de 4 Dígitos");
                break;
            case 7:
                JOptionPane.showMessageDialog(null, "Cuenta No Encontrada");
                break;
            default:
                break;
        }
    }

    public void mostrar() {
        int total = 0;
        int totalD = 0;
        int totalR = 0;
        String matris[][] = new String[miReporteDAO.verTodos().size()][7];
        for (int i = 0; i < miReporteDAO.verTodos().size(); i++) {
            matris[i][0] = miReporteDAO.verTodos().get(i).getTipoTransaccion();
            matris[i][1] = miReporteDAO.verTodos().get(i).getTipoCuenta();
            matris[i][2] = miReporteDAO.verTodos().get(i).getNumeroCuenta();
            matris[i][3] = miReporteDAO.verTodos().get(i).getTitular();
            matris[i][4] = "$" + miReporteDAO.verTodos().get(i).getMonto();
            matris[i][5] = miReporteDAO.verTodos().get(i).getDepositante();
            matris[i][6] = miReporteDAO.verTodos().get(i).getEmpleado();
            if (miReporteDAO.verTodos().get(i).getTipoTransaccion().equals("Depósito")) {
                totalD = totalD + Integer.parseInt(miReporteDAO.verTodos().get(i).getMonto());
            }
            if (miReporteDAO.verTodos().get(i).getTipoTransaccion().equals("Retiro")) {
                totalR = totalR + Integer.parseInt(miReporteDAO.verTodos().get(i).getMonto());
            }
            total = total + Integer.parseInt(miReporteDAO.verTodos().get(i).getMonto());
        };
        Tabla.setModel(new javax.swing.table.DefaultTableModel(
                matris,
                new String[]{
                    "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                }
        ));
        this.totalDeposito.setText("$" + totalD);
        this.totalRetiro.setText("$" + totalR);
        this.valorTotal.setText("$" + total);
        this.numeroCuentaB.setText("");
        this.empleadoSeleccionB.setSelectedIndex(0);
        this.tipoCuentaB.setSelectedIndex(0);
        this.tipoTransaccionB.setSelectedIndex(0);

    }

    public void buscar() {
        int R = 0;
        String cuenta = this.numeroCuentaB.getText();
        String empleado = this.empleadoSeleccionB.getSelectedItem().toString();
        String tipoCuenta = this.tipoCuentaB.getSelectedItem().toString();
        String transaccion = "";
        id_cliente = miOperacionDAO.consultarIdCliente(this.numeroCuentaB.getText());
        if (this.tipoTransaccionB.getSelectedIndex() == 1) {
            transaccion = "Depósito";
        } else if (this.tipoTransaccionB.getSelectedIndex() == 2) {
            transaccion = "Retiro";
        };
        if (this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Depositos")) {
            R = 1;
        }
        if (this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Retiros")) {
            R = 2;
        }
        if (this.tipoCuentaB.getSelectedItem().toString().equals("Cta.Ahorros")) {
            R = 3;
        }
        if (this.tipoCuentaB.getSelectedItem().toString().equals("Cta.Corriente")) {
            R = 4;
        }
        String texto = this.numeroCuentaB.getText();
        texto = texto.replaceAll(" ", "");
        if (texto.length() != 0) {
            R = 5;
        }
        if (this.empleadoSeleccionB.getSelectedIndex() != 0) {
            R = 6;
        }
        if (texto.length() != 0 & this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Depositos")
                & this.empleadoSeleccionB.getSelectedIndex() != 0) {
            R = 7;
        }
        if (texto.length() != 0 & this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Retiros")
                & this.empleadoSeleccionB.getSelectedIndex() != 0) {
            R = 8;
        }
        if (texto.length() != 0 & this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Retiros")
                & this.tipoCuentaB.getSelectedIndex() != 0
                & this.empleadoSeleccionB.getSelectedIndex() != 0) {
            JOptionPane.showMessageDialog(null, "Filtro Innecesario\nYa que el Número de cuenta pertenece a un solo tipo de Cuenta");
        }
        if (texto.length() != 0 & this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Depositos")
                & this.tipoCuentaB.getSelectedIndex() != 0
                & this.empleadoSeleccionB.getSelectedIndex() != 0) {
            JOptionPane.showMessageDialog(null, "Filtro Innecesario\nYa que el Número de cuenta pertenece a un solo tipo de Cuenta");
        }
        if (texto.length() != 0 & this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Depositos")) {
            R = 9;
        }
        if (texto.length() != 0 & this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Retiros")) {
            R = 10;
        }
        if (this.empleadoSeleccionB.getSelectedIndex() != 0 & this.tipoCuentaB.getSelectedItem().toString().equals("Cta.Ahorros")) {
            R = 11;
        }
        if (this.empleadoSeleccionB.getSelectedIndex() != 0 & this.tipoCuentaB.getSelectedItem().toString().equals("Cta.Corriente")) {
            R = 12;
        }
        if (this.empleadoSeleccionB.getSelectedIndex() != 0 & this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Depositos")) {
            R = 13;
        }
        if (this.empleadoSeleccionB.getSelectedIndex() != 0 & this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Retiros")) {
            R = 14;
        }

        if (this.tipoCuentaB.getSelectedItem().toString().equals("Cta.Ahorros") & this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Depositos")) {
            R = 19;
        }
        if (this.tipoCuentaB.getSelectedItem().toString().equals("Cta.Ahorros") & this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Retiros")) {
            R = 20;
        }
        if (this.tipoCuentaB.getSelectedItem().toString().equals("Cta.Corriente") & this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Depositos")) {
            R = 21;
        }
        if (this.tipoCuentaB.getSelectedItem().toString().equals("Cta.Corriente") & this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Retiros")) {
            R = 22;
        }
        if (this.empleadoSeleccionB.getSelectedIndex() != 0 & this.tipoCuentaB.getSelectedItem().toString().equals("Cta.Ahorros") & this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Depositos")) {
            R = 15;
        }
        if (this.empleadoSeleccionB.getSelectedIndex() != 0 & this.tipoCuentaB.getSelectedItem().toString().equals("Cta.Ahorros") & this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Retiros")) {
            R = 16;
        }
        if (this.empleadoSeleccionB.getSelectedIndex() != 0 & this.tipoCuentaB.getSelectedItem().toString().equals("Cta.Corriente") & this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Depositos")) {
            R = 17;
        }
        if (this.empleadoSeleccionB.getSelectedIndex() != 0 & this.tipoCuentaB.getSelectedItem().toString().equals("Cta.Corriente") & this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Retiros")) {
            R = 18;
        }
        if (texto.length() != 0 & this.empleadoSeleccionB.getSelectedIndex() != 0) {
            R = 23;
        }
        if (texto.length() != 0 & this.empleadoSeleccionB.getSelectedIndex() != 0 & this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Depositos")) {
            R = 24;
        }
        if (texto.length() != 0 & this.empleadoSeleccionB.getSelectedIndex() != 0 & this.tipoTransaccionB.getSelectedItem().toString().equals("Ver Retiros")) {
            R = 25;
        }
        if (id_cliente == "") {
            R = 26;
        }

        if (texto.length() != 0 & this.tipoCuentaB.getSelectedIndex() != 0) {
            JOptionPane.showMessageDialog(null, "Filtro Innecesario\nYa que el Número de cuenta pertenece a un solo tipo de Cuenta");
        }

        switch (R) {
            case 0:
                JOptionPane.showMessageDialog(null, "Por Favor Seleccione un Filtro de Búsqueda");
                break;
            case 1:
                int total1 = 0;
                int totalD1 = 0;
                int totalR1 = 0;
                String matris1[][] = new String[miReporteDAO.filtro1().size()][7];
                for (int i = 0; i < miReporteDAO.filtro1().size(); i++) {
                    matris1[i][0] = miReporteDAO.filtro1().get(i).getTipoTransaccion();
                    matris1[i][1] = miReporteDAO.filtro1().get(i).getTipoCuenta();
                    matris1[i][2] = miReporteDAO.filtro1().get(i).getNumeroCuenta();
                    matris1[i][3] = miReporteDAO.filtro1().get(i).getTitular();
                    matris1[i][4] = "$" + miReporteDAO.filtro1().get(i).getMonto();
                    matris1[i][5] = miReporteDAO.filtro1().get(i).getDepositante();
                    matris1[i][6] = miReporteDAO.filtro1().get(i).getEmpleado();
                    if (miReporteDAO.filtro1().get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD1 = totalD1 + Integer.parseInt(miReporteDAO.filtro1().get(i).getMonto());
                    }
                    if (miReporteDAO.filtro1().get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR1 = totalR1 + Integer.parseInt(miReporteDAO.filtro1().get(i).getMonto());
                    }
                    total1 = total1 + Integer.parseInt(miReporteDAO.filtro1().get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris1,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD1);
                this.totalRetiro.setText("$" + totalR1);
                this.valorTotal.setText("$" + total1);

                break;
            case 2:
                int total2 = 0;
                int totalD2 = 0;
                int totalR2 = 0;
                String matris2[][] = new String[miReporteDAO.filtro2().size()][7];
                for (int i = 0; i < miReporteDAO.filtro2().size(); i++) {
                    matris2[i][0] = miReporteDAO.filtro2().get(i).getTipoTransaccion();
                    matris2[i][1] = miReporteDAO.filtro2().get(i).getTipoCuenta();
                    matris2[i][2] = miReporteDAO.filtro2().get(i).getNumeroCuenta();
                    matris2[i][3] = miReporteDAO.filtro2().get(i).getTitular();
                    matris2[i][4] = "$" + miReporteDAO.filtro2().get(i).getMonto();
                    matris2[i][5] = miReporteDAO.filtro2().get(i).getDepositante();
                    matris2[i][6] = miReporteDAO.filtro2().get(i).getEmpleado();
                    if (miReporteDAO.filtro2().get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD2 = totalD2 + Integer.parseInt(miReporteDAO.filtro2().get(i).getMonto());
                    }
                    if (miReporteDAO.filtro2().get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR2 = totalR2 + Integer.parseInt(miReporteDAO.filtro2().get(i).getMonto());
                    }
                    total2 = total2 + Integer.parseInt(miReporteDAO.filtro2().get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris2,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD2);
                this.totalRetiro.setText("$" + totalR2);
                this.valorTotal.setText("$" + total2);
                break;
            case 3:
                int total3 = 0;
                int totalD3 = 0;
                int totalR3 = 0;
                String matris3[][] = new String[miReporteDAO.filtro1().size()][7];
                for (int i = 0; i < miReporteDAO.filtro3().size(); i++) {
                    matris3[i][0] = miReporteDAO.filtro3().get(i).getTipoTransaccion();
                    matris3[i][1] = miReporteDAO.filtro3().get(i).getTipoCuenta();
                    matris3[i][2] = miReporteDAO.filtro3().get(i).getNumeroCuenta();
                    matris3[i][3] = miReporteDAO.filtro3().get(i).getTitular();
                    matris3[i][4] = "$" + miReporteDAO.filtro3().get(i).getMonto();
                    matris3[i][5] = miReporteDAO.filtro3().get(i).getDepositante();
                    matris3[i][6] = miReporteDAO.filtro3().get(i).getEmpleado();
                    if (miReporteDAO.filtro3().get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD3 = totalD3 + Integer.parseInt(miReporteDAO.filtro1().get(i).getMonto());
                    }
                    if (miReporteDAO.filtro3().get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR3 = totalR3 + Integer.parseInt(miReporteDAO.filtro3().get(i).getMonto());
                    }
                    total3 = total3 + Integer.parseInt(miReporteDAO.filtro3().get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris3,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD3);
                this.totalRetiro.setText("$" + totalR3);
                this.valorTotal.setText("$" + total3);
                break;
            case 4:
                int total4 = 0;
                int totalD4 = 0;
                int totalR4 = 0;
                String matris4[][] = new String[miReporteDAO.filtro4().size()][7];
                for (int i = 0; i < miReporteDAO.filtro4().size(); i++) {
                    matris4[i][0] = miReporteDAO.filtro4().get(i).getTipoTransaccion();
                    matris4[i][1] = miReporteDAO.filtro4().get(i).getTipoCuenta();
                    matris4[i][2] = miReporteDAO.filtro4().get(i).getNumeroCuenta();
                    matris4[i][3] = miReporteDAO.filtro4().get(i).getTitular();
                    matris4[i][4] = "$" + miReporteDAO.filtro4().get(i).getMonto();
                    matris4[i][5] = miReporteDAO.filtro4().get(i).getDepositante();
                    matris4[i][6] = miReporteDAO.filtro4().get(i).getEmpleado();
                    if (miReporteDAO.filtro4().get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD4 = totalD4 + Integer.parseInt(miReporteDAO.filtro4().get(i).getMonto());
                    }
                    if (miReporteDAO.filtro4().get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR4 = totalR4 + Integer.parseInt(miReporteDAO.filtro4().get(i).getMonto());
                    }
                    total4 = total4 + Integer.parseInt(miReporteDAO.filtro4().get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris4,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD4);
                this.totalRetiro.setText("$" + totalR4);
                this.valorTotal.setText("$" + total4);
                break;
            case 5:
                int total5 = 0;
                int totalD5 = 0;
                int totalR5 = 0;
                String matris5[][] = new String[miReporteDAO.filtro5(cuenta).size()][7];
                for (int i = 0; i < miReporteDAO.filtro5(cuenta).size(); i++) {
                    matris5[i][0] = miReporteDAO.filtro5(cuenta).get(i).getTipoTransaccion();
                    matris5[i][1] = miReporteDAO.filtro5(cuenta).get(i).getTipoCuenta();
                    matris5[i][2] = miReporteDAO.filtro5(cuenta).get(i).getNumeroCuenta();
                    matris5[i][3] = miReporteDAO.filtro5(cuenta).get(i).getTitular();
                    matris5[i][4] = "$" + miReporteDAO.filtro5(cuenta).get(i).getMonto();
                    matris5[i][5] = miReporteDAO.filtro5(cuenta).get(i).getDepositante();
                    matris5[i][6] = miReporteDAO.filtro5(cuenta).get(i).getEmpleado();
                    if (miReporteDAO.filtro5(cuenta).get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD5 = totalD5 + Integer.parseInt(miReporteDAO.filtro5(cuenta).get(i).getMonto());
                    }
                    if (miReporteDAO.filtro5(cuenta).get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR5 = totalR5 + Integer.parseInt(miReporteDAO.filtro5(cuenta).get(i).getMonto());
                    }
                    total5 = total5 + Integer.parseInt(miReporteDAO.filtro5(cuenta).get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris5,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD5);
                this.totalRetiro.setText("$" + totalR5);
                this.valorTotal.setText("$" + total5);

                break;
            case 6:
                int total6 = 0;
                int totalD6 = 0;
                int totalR6 = 0;
                String matris6[][] = new String[miReporteDAO.filtro6(empleado).size()][7];
                for (int i = 0; i < miReporteDAO.filtro6(empleado).size(); i++) {
                    matris6[i][0] = miReporteDAO.filtro6(empleado).get(i).getTipoTransaccion();
                    matris6[i][1] = miReporteDAO.filtro6(empleado).get(i).getTipoCuenta();
                    matris6[i][2] = miReporteDAO.filtro6(empleado).get(i).getNumeroCuenta();
                    matris6[i][3] = miReporteDAO.filtro6(empleado).get(i).getTitular();
                    matris6[i][4] = "$" + miReporteDAO.filtro6(empleado).get(i).getMonto();
                    matris6[i][5] = miReporteDAO.filtro6(empleado).get(i).getDepositante();
                    matris6[i][6] = miReporteDAO.filtro6(empleado).get(i).getEmpleado();
                    if (miReporteDAO.filtro6(empleado).get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD6 = totalD6 + Integer.parseInt(miReporteDAO.filtro6(empleado).get(i).getMonto());
                    }
                    if (miReporteDAO.filtro6(empleado).get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR6 = totalR6 + Integer.parseInt(miReporteDAO.filtro6(empleado).get(i).getMonto());
                    }
                    total6 = total6 + Integer.parseInt(miReporteDAO.filtro6(empleado).get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris6,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD6);
                this.totalRetiro.setText("$" + totalR6);
                this.valorTotal.setText("$" + total6);
                break;
            case 7:
                int total7 = 0;
                int totalD7 = 0;
                int totalR7 = 0;
                String matris7[][] = new String[miReporteDAO.filtro7(cuenta, empleado).size()][7];
                for (int i = 0; i < miReporteDAO.filtro7(cuenta, empleado).size(); i++) {
                    matris7[i][0] = miReporteDAO.filtro7(cuenta, empleado).get(i).getTipoTransaccion();
                    matris7[i][1] = miReporteDAO.filtro7(cuenta, empleado).get(i).getTipoCuenta();
                    matris7[i][2] = miReporteDAO.filtro7(cuenta, empleado).get(i).getNumeroCuenta();
                    matris7[i][3] = miReporteDAO.filtro7(cuenta, empleado).get(i).getTitular();
                    matris7[i][4] = "$" + miReporteDAO.filtro7(cuenta, empleado).get(i).getMonto();
                    matris7[i][5] = miReporteDAO.filtro7(cuenta, empleado).get(i).getDepositante();
                    matris7[i][6] = miReporteDAO.filtro7(cuenta, empleado).get(i).getEmpleado();
                    if (miReporteDAO.filtro7(cuenta, empleado).get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD7 = totalD7 + Integer.parseInt(miReporteDAO.filtro7(cuenta, empleado).get(i).getMonto());
                    }
                    if (miReporteDAO.filtro7(cuenta, empleado).get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR7 = totalR7 + Integer.parseInt(miReporteDAO.filtro7(cuenta, empleado).get(i).getMonto());
                    }
                    total7 = total7 + Integer.parseInt(miReporteDAO.filtro7(cuenta, empleado).get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris7,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD7);
                this.totalRetiro.setText("$" + totalR7);
                this.valorTotal.setText("$" + total7);
                break;
            case 8:
                int total8 = 0;
                int totalD8 = 0;
                int totalR8 = 0;
                String matris8[][] = new String[miReporteDAO.filtro8(cuenta, empleado).size()][7];
                for (int i = 0; i < miReporteDAO.filtro8(cuenta, empleado).size(); i++) {
                    matris8[i][0] = miReporteDAO.filtro8(cuenta, empleado).get(i).getTipoTransaccion();
                    matris8[i][1] = miReporteDAO.filtro8(cuenta, empleado).get(i).getTipoCuenta();
                    matris8[i][2] = miReporteDAO.filtro8(cuenta, empleado).get(i).getNumeroCuenta();
                    matris8[i][3] = miReporteDAO.filtro8(cuenta, empleado).get(i).getTitular();
                    matris8[i][4] = "$" + miReporteDAO.filtro8(cuenta, empleado).get(i).getMonto();
                    matris8[i][5] = miReporteDAO.filtro8(cuenta, empleado).get(i).getDepositante();
                    matris8[i][6] = miReporteDAO.filtro8(cuenta, empleado).get(i).getEmpleado();
                    if (miReporteDAO.filtro8(cuenta, empleado).get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD8 = totalD8 + Integer.parseInt(miReporteDAO.filtro8(cuenta, empleado).get(i).getMonto());
                    }
                    if (miReporteDAO.filtro8(cuenta, empleado).get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR8 = totalR8 + Integer.parseInt(miReporteDAO.filtro8(cuenta, empleado).get(i).getMonto());
                    }
                    total8 = total8 + Integer.parseInt(miReporteDAO.filtro8(cuenta, empleado).get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris8,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD8);
                this.totalRetiro.setText("$" + totalR8);
                this.valorTotal.setText("$" + total8);
                break;
            case 9:
                int total9 = 0;
                int totalD9 = 0;
                int totalR9 = 0;
                String matris9[][] = new String[miReporteDAO.filtro9(cuenta).size()][7];
                for (int i = 0; i < miReporteDAO.filtro9(cuenta).size(); i++) {
                    matris9[i][0] = miReporteDAO.filtro9(cuenta).get(i).getTipoTransaccion();
                    matris9[i][1] = miReporteDAO.filtro9(cuenta).get(i).getTipoCuenta();
                    matris9[i][2] = miReporteDAO.filtro9(cuenta).get(i).getNumeroCuenta();
                    matris9[i][3] = miReporteDAO.filtro9(cuenta).get(i).getTitular();
                    matris9[i][4] = "$" + miReporteDAO.filtro9(cuenta).get(i).getMonto();
                    matris9[i][5] = miReporteDAO.filtro9(cuenta).get(i).getDepositante();
                    matris9[i][6] = miReporteDAO.filtro9(cuenta).get(i).getEmpleado();
                    if (miReporteDAO.filtro9(cuenta).get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD9 = totalD9 + Integer.parseInt(miReporteDAO.filtro9(cuenta).get(i).getMonto());
                    }
                    if (miReporteDAO.filtro9(cuenta).get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR9 = totalR9 + Integer.parseInt(miReporteDAO.filtro9(cuenta).get(i).getMonto());
                    }
                    total9 = total9 + Integer.parseInt(miReporteDAO.filtro9(cuenta).get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris9,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD9);
                this.totalRetiro.setText("$" + totalR9);
                this.valorTotal.setText("$" + total9);
                break;
            case 10:
                int total10 = 0;
                int totalD10 = 0;
                int totalR10 = 0;
                String matris10[][] = new String[miReporteDAO.filtro10(cuenta).size()][7];
                for (int i = 0; i < miReporteDAO.filtro10(cuenta).size(); i++) {
                    matris10[i][0] = miReporteDAO.filtro10(cuenta).get(i).getTipoTransaccion();
                    matris10[i][1] = miReporteDAO.filtro10(cuenta).get(i).getTipoCuenta();
                    matris10[i][2] = miReporteDAO.filtro10(cuenta).get(i).getNumeroCuenta();
                    matris10[i][3] = miReporteDAO.filtro10(cuenta).get(i).getTitular();
                    matris10[i][4] = "$" + miReporteDAO.filtro10(cuenta).get(i).getMonto();
                    matris10[i][5] = miReporteDAO.filtro10(cuenta).get(i).getDepositante();
                    matris10[i][6] = miReporteDAO.filtro10(cuenta).get(i).getEmpleado();
                    if (miReporteDAO.filtro10(cuenta).get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD10 = totalD10 + Integer.parseInt(miReporteDAO.filtro10(cuenta).get(i).getMonto());
                    }
                    if (miReporteDAO.filtro10(cuenta).get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR10 = totalR10 + Integer.parseInt(miReporteDAO.filtro10(cuenta).get(i).getMonto());
                    }
                    total10 = total10 + Integer.parseInt(miReporteDAO.filtro10(cuenta).get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris10,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD10);
                this.totalRetiro.setText("$" + totalR10);
                this.valorTotal.setText("$" + total10);
                break;
            case 11:
                int total11 = 0;
                int totalD11 = 0;
                int totalR11 = 0;
                String matris11[][] = new String[miReporteDAO.filtro11(empleado).size()][7];
                for (int i = 0; i < miReporteDAO.filtro11(empleado).size(); i++) {
                    matris11[i][0] = miReporteDAO.filtro11(empleado).get(i).getTipoTransaccion();
                    matris11[i][1] = miReporteDAO.filtro11(empleado).get(i).getTipoCuenta();
                    matris11[i][2] = miReporteDAO.filtro11(empleado).get(i).getNumeroCuenta();
                    matris11[i][3] = miReporteDAO.filtro11(empleado).get(i).getTitular();
                    matris11[i][4] = "$" + miReporteDAO.filtro11(empleado).get(i).getMonto();
                    matris11[i][5] = miReporteDAO.filtro11(empleado).get(i).getDepositante();
                    matris11[i][6] = miReporteDAO.filtro11(empleado).get(i).getEmpleado();
                    if (miReporteDAO.filtro11(empleado).get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD11 = totalD11 + Integer.parseInt(miReporteDAO.filtro11(empleado).get(i).getMonto());
                    }
                    if (miReporteDAO.filtro11(empleado).get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR11 = totalR11 + Integer.parseInt(miReporteDAO.filtro11(empleado).get(i).getMonto());
                    }
                    total11 = total11 + Integer.parseInt(miReporteDAO.filtro11(empleado).get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris11,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD11);
                this.totalRetiro.setText("$" + totalR11);
                this.valorTotal.setText("$" + total11);
                break;
            case 12:
                int total12 = 0;
                int totalD12 = 0;
                int totalR12 = 0;
                String matris12[][] = new String[miReporteDAO.filtro12(empleado).size()][7];
                for (int i = 0; i < miReporteDAO.filtro12(empleado).size(); i++) {
                    matris12[i][0] = miReporteDAO.filtro12(empleado).get(i).getTipoTransaccion();
                    matris12[i][1] = miReporteDAO.filtro12(empleado).get(i).getTipoCuenta();
                    matris12[i][2] = miReporteDAO.filtro12(empleado).get(i).getNumeroCuenta();
                    matris12[i][3] = miReporteDAO.filtro12(empleado).get(i).getTitular();
                    matris12[i][4] = "$" + miReporteDAO.filtro12(empleado).get(i).getMonto();
                    matris12[i][5] = miReporteDAO.filtro12(empleado).get(i).getDepositante();
                    matris12[i][6] = miReporteDAO.filtro12(empleado).get(i).getEmpleado();
                    if (miReporteDAO.filtro12(empleado).get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD12 = totalD12 + Integer.parseInt(miReporteDAO.filtro12(empleado).get(i).getMonto());
                    }
                    if (miReporteDAO.filtro12(empleado).get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR12 = totalR12 + Integer.parseInt(miReporteDAO.filtro12(empleado).get(i).getMonto());
                    }
                    total12 = total12 + Integer.parseInt(miReporteDAO.filtro12(empleado).get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris12,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD12);
                this.totalRetiro.setText("$" + totalR12);
                this.valorTotal.setText("$" + total12);
                break;
            case 13:
                int total13 = 0;
                int totalD13 = 0;
                int totalR13 = 0;
                String matris13[][] = new String[miReporteDAO.filtro13(empleado).size()][7];
                for (int i = 0; i < miReporteDAO.filtro13(empleado).size(); i++) {
                    matris13[i][0] = miReporteDAO.filtro13(empleado).get(i).getTipoTransaccion();
                    matris13[i][1] = miReporteDAO.filtro13(empleado).get(i).getTipoCuenta();
                    matris13[i][2] = miReporteDAO.filtro13(empleado).get(i).getNumeroCuenta();
                    matris13[i][3] = miReporteDAO.filtro13(empleado).get(i).getTitular();
                    matris13[i][4] = "$" + miReporteDAO.filtro13(empleado).get(i).getMonto();
                    matris13[i][5] = miReporteDAO.filtro13(empleado).get(i).getDepositante();
                    matris13[i][6] = miReporteDAO.filtro13(empleado).get(i).getEmpleado();
                    if (miReporteDAO.filtro13(empleado).get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD13 = totalD13 + Integer.parseInt(miReporteDAO.filtro13(empleado).get(i).getMonto());
                    }
                    if (miReporteDAO.filtro13(empleado).get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR13 = totalR13 + Integer.parseInt(miReporteDAO.filtro13(empleado).get(i).getMonto());
                    }
                    total13 = total13 + Integer.parseInt(miReporteDAO.filtro13(empleado).get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris13,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD13);
                this.totalRetiro.setText("$" + totalR13);
                this.valorTotal.setText("$" + total13);
                break;
            case 14:
                int total14 = 0;
                int totalD14 = 0;
                int totalR14 = 0;
                String matris14[][] = new String[miReporteDAO.filtro14(empleado).size()][7];
                for (int i = 0; i < miReporteDAO.filtro14(empleado).size(); i++) {
                    matris14[i][0] = miReporteDAO.filtro14(empleado).get(i).getTipoTransaccion();
                    matris14[i][1] = miReporteDAO.filtro14(empleado).get(i).getTipoCuenta();
                    matris14[i][2] = miReporteDAO.filtro14(empleado).get(i).getNumeroCuenta();
                    matris14[i][3] = miReporteDAO.filtro14(empleado).get(i).getTitular();
                    matris14[i][4] = "$" + miReporteDAO.filtro14(empleado).get(i).getMonto();
                    matris14[i][5] = miReporteDAO.filtro14(empleado).get(i).getDepositante();
                    matris14[i][6] = miReporteDAO.filtro14(empleado).get(i).getEmpleado();
                    if (miReporteDAO.filtro14(empleado).get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD14 = totalD14 + Integer.parseInt(miReporteDAO.filtro14(empleado).get(i).getMonto());
                    }
                    if (miReporteDAO.filtro14(empleado).get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR14 = totalR14 + Integer.parseInt(miReporteDAO.filtro14(empleado).get(i).getMonto());
                    }
                    total14 = total14 + Integer.parseInt(miReporteDAO.filtro14(empleado).get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris14,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD14);
                this.totalRetiro.setText("$" + totalR14);
                this.valorTotal.setText("$" + total14);
                break;
            case 15:
                int total15 = 0;
                int totalD15 = 0;
                int totalR15 = 0;
                String matris15[][] = new String[miReporteDAO.filtro15(cuenta, empleado).size()][7];
                for (int i = 0; i < miReporteDAO.filtro15(cuenta, empleado).size(); i++) {
                    matris15[i][0] = miReporteDAO.filtro15(cuenta, empleado).get(i).getTipoTransaccion();
                    matris15[i][1] = miReporteDAO.filtro15(cuenta, empleado).get(i).getTipoCuenta();
                    matris15[i][2] = miReporteDAO.filtro15(cuenta, empleado).get(i).getNumeroCuenta();
                    matris15[i][3] = miReporteDAO.filtro15(cuenta, empleado).get(i).getTitular();
                    matris15[i][4] = "$" + miReporteDAO.filtro15(cuenta, empleado).get(i).getMonto();
                    matris15[i][5] = miReporteDAO.filtro15(cuenta, empleado).get(i).getDepositante();
                    matris15[i][6] = miReporteDAO.filtro15(cuenta, empleado).get(i).getEmpleado();
                    if (miReporteDAO.filtro15(cuenta, empleado).get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD15 = totalD15 + Integer.parseInt(miReporteDAO.filtro15(cuenta, empleado).get(i).getMonto());
                    }
                    if (miReporteDAO.filtro15(cuenta, empleado).get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR15 = totalR15 + Integer.parseInt(miReporteDAO.filtro15(cuenta, empleado).get(i).getMonto());
                    }
                    total15 = total15 + Integer.parseInt(miReporteDAO.filtro15(cuenta, empleado).get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris15,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD15);
                this.totalRetiro.setText("$" + totalR15);
                this.valorTotal.setText("$" + total15);
                break;
            case 16:
                int total16 = 0;
                int totalD16 = 0;
                int totalR16 = 0;
                String matris16[][] = new String[miReporteDAO.filtro16(empleado).size()][7];
                for (int i = 0; i < miReporteDAO.filtro16(empleado).size(); i++) {
                    matris16[i][0] = miReporteDAO.filtro16(empleado).get(i).getTipoTransaccion();
                    matris16[i][1] = miReporteDAO.filtro16(empleado).get(i).getTipoCuenta();
                    matris16[i][2] = miReporteDAO.filtro16(empleado).get(i).getNumeroCuenta();
                    matris16[i][3] = miReporteDAO.filtro16(empleado).get(i).getTitular();
                    matris16[i][4] = "$" + miReporteDAO.filtro16(empleado).get(i).getMonto();
                    matris16[i][5] = miReporteDAO.filtro16(empleado).get(i).getDepositante();
                    matris16[i][6] = miReporteDAO.filtro16(empleado).get(i).getEmpleado();
                    if (miReporteDAO.filtro16(empleado).get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD16 = totalD16 + Integer.parseInt(miReporteDAO.filtro16(empleado).get(i).getMonto());
                    }
                    if (miReporteDAO.filtro16(empleado).get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR16 = totalR16 + Integer.parseInt(miReporteDAO.filtro16(empleado).get(i).getMonto());
                    }
                    total16 = total16 + Integer.parseInt(miReporteDAO.filtro16(empleado).get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris16,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD16);
                this.totalRetiro.setText("$" + totalR16);
                this.valorTotal.setText("$" + total16);
                break;
            case 17:
                int total17 = 0;
                int totalD17 = 0;
                int totalR17 = 0;
                String matris17[][] = new String[miReporteDAO.filtro17(empleado).size()][7];
                for (int i = 0; i < miReporteDAO.filtro17(empleado).size(); i++) {
                    matris17[i][0] = miReporteDAO.filtro17(empleado).get(i).getTipoTransaccion();
                    matris17[i][1] = miReporteDAO.filtro17(empleado).get(i).getTipoCuenta();
                    matris17[i][2] = miReporteDAO.filtro17(empleado).get(i).getNumeroCuenta();
                    matris17[i][3] = miReporteDAO.filtro17(empleado).get(i).getTitular();
                    matris17[i][4] = "$" + miReporteDAO.filtro17(empleado).get(i).getMonto();
                    matris17[i][5] = miReporteDAO.filtro17(empleado).get(i).getDepositante();
                    matris17[i][6] = miReporteDAO.filtro17(empleado).get(i).getEmpleado();
                    if (miReporteDAO.filtro17(empleado).get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD17 = totalD17 + Integer.parseInt(miReporteDAO.filtro17(empleado).get(i).getMonto());
                    }
                    if (miReporteDAO.filtro17(empleado).get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR17 = totalR17 + Integer.parseInt(miReporteDAO.filtro17(empleado).get(i).getMonto());
                    }
                    total17 = total17 + Integer.parseInt(miReporteDAO.filtro17(empleado).get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris17,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD17);
                this.totalRetiro.setText("$" + totalR17);
                this.valorTotal.setText("$" + total17);
                break;
            case 18:
                int total18 = 0;
                int totalD18 = 0;
                int totalR18 = 0;
                String matris18[][] = new String[miReporteDAO.filtro18(empleado).size()][7];
                for (int i = 0; i < miReporteDAO.filtro18(empleado).size(); i++) {
                    matris18[i][0] = miReporteDAO.filtro18(empleado).get(i).getTipoTransaccion();
                    matris18[i][1] = miReporteDAO.filtro18(empleado).get(i).getTipoCuenta();
                    matris18[i][2] = miReporteDAO.filtro18(empleado).get(i).getNumeroCuenta();
                    matris18[i][3] = miReporteDAO.filtro18(empleado).get(i).getTitular();
                    matris18[i][4] = "$" + miReporteDAO.filtro18(empleado).get(i).getMonto();
                    matris18[i][5] = miReporteDAO.filtro18(empleado).get(i).getDepositante();
                    matris18[i][6] = miReporteDAO.filtro18(empleado).get(i).getEmpleado();
                    if (miReporteDAO.filtro18(empleado).get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD18 = totalD18 + Integer.parseInt(miReporteDAO.filtro18(empleado).get(i).getMonto());
                    }
                    if (miReporteDAO.filtro18(empleado).get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR18 = totalR18 + Integer.parseInt(miReporteDAO.filtro18(empleado).get(i).getMonto());
                    }
                    total18 = total18 + Integer.parseInt(miReporteDAO.filtro18(empleado).get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris18,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD18);
                this.totalRetiro.setText("$" + totalR18);
                this.valorTotal.setText("$" + total18);
                break;
            case 19:
                int total19 = 0;
                int totalD19 = 0;
                int totalR19 = 0;
                String matris19[][] = new String[miReporteDAO.filtro19(cuenta, empleado).size()][7];
                for (int i = 0; i < miReporteDAO.filtro19(cuenta, empleado).size(); i++) {
                    matris19[i][0] = miReporteDAO.filtro19(cuenta, empleado).get(i).getTipoTransaccion();
                    matris19[i][1] = miReporteDAO.filtro19(cuenta, empleado).get(i).getTipoCuenta();
                    matris19[i][2] = miReporteDAO.filtro19(cuenta, empleado).get(i).getNumeroCuenta();
                    matris19[i][3] = miReporteDAO.filtro19(cuenta, empleado).get(i).getTitular();
                    matris19[i][4] = "$" + miReporteDAO.filtro19(cuenta, empleado).get(i).getMonto();
                    matris19[i][5] = miReporteDAO.filtro19(cuenta, empleado).get(i).getDepositante();
                    matris19[i][6] = miReporteDAO.filtro19(cuenta, empleado).get(i).getEmpleado();
                    if (miReporteDAO.filtro19(cuenta, empleado).get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD19 = totalD19 + Integer.parseInt(miReporteDAO.filtro19(cuenta, empleado).get(i).getMonto());
                    }
                    if (miReporteDAO.filtro19(cuenta, empleado).get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR19 = totalR19 + Integer.parseInt(miReporteDAO.filtro19(cuenta, empleado).get(i).getMonto());
                    }
                    total19 = total19 + Integer.parseInt(miReporteDAO.filtro19(cuenta, empleado).get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris19,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD19);
                this.totalRetiro.setText("$" + totalR19);
                this.valorTotal.setText("$" + total19);
                break;
            case 20:
                int total20 = 0;
                int totalD20 = 0;
                int totalR20 = 0;
                String matris20[][] = new String[miReporteDAO.filtro20().size()][7];
                for (int i = 0; i < miReporteDAO.filtro20().size(); i++) {
                    matris20[i][0] = miReporteDAO.filtro20().get(i).getTipoTransaccion();
                    matris20[i][1] = miReporteDAO.filtro20().get(i).getTipoCuenta();
                    matris20[i][2] = miReporteDAO.filtro20().get(i).getNumeroCuenta();
                    matris20[i][3] = miReporteDAO.filtro20().get(i).getTitular();
                    matris20[i][4] = "$" + miReporteDAO.filtro20().get(i).getMonto();
                    matris20[i][5] = miReporteDAO.filtro20().get(i).getDepositante();
                    matris20[i][6] = miReporteDAO.filtro20().get(i).getEmpleado();
                    if (miReporteDAO.filtro20().get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD20 = totalD20 + Integer.parseInt(miReporteDAO.filtro20().get(i).getMonto());
                    }
                    if (miReporteDAO.filtro20().get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR20 = totalR20 + Integer.parseInt(miReporteDAO.filtro20().get(i).getMonto());
                    }
                    total20 = total20 + Integer.parseInt(miReporteDAO.filtro20().get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris20,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD20);
                this.totalRetiro.setText("$" + totalR20);
                this.valorTotal.setText("$" + total20);
                break;
            case 21:
                int total21 = 0;
                int totalD21 = 0;
                int totalR21 = 0;
                String matris21[][] = new String[miReporteDAO.filtro21().size()][7];
                for (int i = 0; i < miReporteDAO.filtro21().size(); i++) {
                    matris21[i][0] = miReporteDAO.filtro21().get(i).getTipoTransaccion();
                    matris21[i][1] = miReporteDAO.filtro21().get(i).getTipoCuenta();
                    matris21[i][2] = miReporteDAO.filtro21().get(i).getNumeroCuenta();
                    matris21[i][3] = miReporteDAO.filtro21().get(i).getTitular();
                    matris21[i][4] = "$" + miReporteDAO.filtro21().get(i).getMonto();
                    matris21[i][5] = miReporteDAO.filtro21().get(i).getDepositante();
                    matris21[i][6] = miReporteDAO.filtro21().get(i).getEmpleado();
                    if (miReporteDAO.filtro21().get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD21 = totalD21 + Integer.parseInt(miReporteDAO.filtro21().get(i).getMonto());
                    }
                    if (miReporteDAO.filtro21().get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR21 = totalR21 + Integer.parseInt(miReporteDAO.filtro21().get(i).getMonto());
                    }
                    total21 = total21 + Integer.parseInt(miReporteDAO.filtro21().get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris21,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD21);
                this.totalRetiro.setText("$" + totalR21);
                this.valorTotal.setText("$" + total21);
                break;
            case 22:
                int total22 = 0;
                int totalD22 = 0;
                int totalR22 = 0;
                String matris22[][] = new String[miReporteDAO.filtro22().size()][7];
                for (int i = 0; i < miReporteDAO.filtro22().size(); i++) {
                    matris22[i][0] = miReporteDAO.filtro22().get(i).getTipoTransaccion();
                    matris22[i][1] = miReporteDAO.filtro22().get(i).getTipoCuenta();
                    matris22[i][2] = miReporteDAO.filtro22().get(i).getNumeroCuenta();
                    matris22[i][3] = miReporteDAO.filtro22().get(i).getTitular();
                    matris22[i][4] = "$" + miReporteDAO.filtro22().get(i).getMonto();
                    matris22[i][5] = miReporteDAO.filtro22().get(i).getDepositante();
                    matris22[i][6] = miReporteDAO.filtro22().get(i).getEmpleado();
                    if (miReporteDAO.filtro22().get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD22 = totalD22 + Integer.parseInt(miReporteDAO.filtro22().get(i).getMonto());
                    }
                    if (miReporteDAO.filtro22().get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR22 = totalR22 + Integer.parseInt(miReporteDAO.filtro22().get(i).getMonto());
                    }
                    total22 = total22 + Integer.parseInt(miReporteDAO.filtro22().get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris22,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD22);
                this.totalRetiro.setText("$" + totalR22);
                this.valorTotal.setText("$" + total22);
                break;
            case 23:
                int total23 = 0;
                int totalD23 = 0;
                int totalR23 = 0;
                String matris23[][] = new String[miReporteDAO.filtro23(cuenta, empleado).size()][7];
                for (int i = 0; i < miReporteDAO.filtro23(cuenta, empleado).size(); i++) {
                    matris23[i][0] = miReporteDAO.filtro23(cuenta, empleado).get(i).getTipoTransaccion();
                    matris23[i][1] = miReporteDAO.filtro23(cuenta, empleado).get(i).getTipoCuenta();
                    matris23[i][2] = miReporteDAO.filtro23(cuenta, empleado).get(i).getNumeroCuenta();
                    matris23[i][3] = miReporteDAO.filtro23(cuenta, empleado).get(i).getTitular();
                    matris23[i][4] = "$" + miReporteDAO.filtro23(cuenta, empleado).get(i).getMonto();
                    matris23[i][5] = miReporteDAO.filtro23(cuenta, empleado).get(i).getDepositante();
                    matris23[i][6] = miReporteDAO.filtro23(cuenta, empleado).get(i).getEmpleado();
                    if (miReporteDAO.filtro23(cuenta, empleado).get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD23 = totalD23 + Integer.parseInt(miReporteDAO.filtro23(cuenta, empleado).get(i).getMonto());
                    }
                    if (miReporteDAO.filtro23(cuenta, empleado).get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR23 = totalR23 + Integer.parseInt(miReporteDAO.filtro23(cuenta, empleado).get(i).getMonto());
                    }
                    total23 = total23 + Integer.parseInt(miReporteDAO.filtro23(cuenta, empleado).get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris23,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD23);
                this.totalRetiro.setText("$" + totalR23);
                this.valorTotal.setText("$" + total23);
                break;
            case 24:
                int total24 = 0;
                int totalD24 = 0;
                int totalR24 = 0;
                String matris24[][] = new String[miReporteDAO.filtro24(cuenta, empleado).size()][7];
                for (int i = 0; i < miReporteDAO.filtro24(cuenta, empleado).size(); i++) {
                    matris24[i][0] = miReporteDAO.filtro24(cuenta, empleado).get(i).getTipoTransaccion();
                    matris24[i][1] = miReporteDAO.filtro24(cuenta, empleado).get(i).getTipoCuenta();
                    matris24[i][2] = miReporteDAO.filtro24(cuenta, empleado).get(i).getNumeroCuenta();
                    matris24[i][3] = miReporteDAO.filtro24(cuenta, empleado).get(i).getTitular();
                    matris24[i][4] = "$" + miReporteDAO.filtro24(cuenta, empleado).get(i).getMonto();
                    matris24[i][5] = miReporteDAO.filtro24(cuenta, empleado).get(i).getDepositante();
                    matris24[i][6] = miReporteDAO.filtro24(cuenta, empleado).get(i).getEmpleado();
                    if (miReporteDAO.filtro24(cuenta, empleado).get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD24 = totalD24 + Integer.parseInt(miReporteDAO.filtro24(cuenta, empleado).get(i).getMonto());
                    }
                    if (miReporteDAO.filtro24(cuenta, empleado).get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR24 = totalR24 + Integer.parseInt(miReporteDAO.filtro24(cuenta, empleado).get(i).getMonto());
                    }
                    total24 = total24 + Integer.parseInt(miReporteDAO.filtro24(cuenta, empleado).get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris24,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD24);
                this.totalRetiro.setText("$" + totalR24);
                this.valorTotal.setText("$" + total24);
                break;
            case 25:
                int total25 = 0;
                int totalD25 = 0;
                int totalR25 = 0;
                String matris25[][] = new String[miReporteDAO.filtro25(cuenta, empleado).size()][7];
                for (int i = 0; i < miReporteDAO.filtro25(cuenta, empleado).size(); i++) {
                    matris25[i][0] = miReporteDAO.filtro25(cuenta, empleado).get(i).getTipoTransaccion();
                    matris25[i][1] = miReporteDAO.filtro25(cuenta, empleado).get(i).getTipoCuenta();
                    matris25[i][2] = miReporteDAO.filtro25(cuenta, empleado).get(i).getNumeroCuenta();
                    matris25[i][3] = miReporteDAO.filtro25(cuenta, empleado).get(i).getTitular();
                    matris25[i][4] = "$" + miReporteDAO.filtro25(cuenta, empleado).get(i).getMonto();
                    matris25[i][5] = miReporteDAO.filtro25(cuenta, empleado).get(i).getDepositante();
                    matris25[i][6] = miReporteDAO.filtro25(cuenta, empleado).get(i).getEmpleado();
                    if (miReporteDAO.filtro25(cuenta, empleado).get(i).getTipoTransaccion().equals("Depósito")) {
                        totalD25 = totalD25 + Integer.parseInt(miReporteDAO.filtro25(cuenta, empleado).get(i).getMonto());
                    }
                    if (miReporteDAO.filtro25(cuenta, empleado).get(i).getTipoTransaccion().equals("Retiro")) {
                        totalR25 = totalR25 + Integer.parseInt(miReporteDAO.filtro25(cuenta, empleado).get(i).getMonto());
                    }
                    total25 = total25 + Integer.parseInt(miReporteDAO.filtro25(cuenta, empleado).get(i).getMonto());
                }
                ;
                Tabla.setModel(new javax.swing.table.DefaultTableModel(
                        matris25,
                        new String[]{
                            "Tipo Transaccion", "Tipo Cuenta", "N° Cuenta", "Titular", "Monto", "Depositante", "Empleado"
                        }
                ));
                this.totalDeposito.setText("$" + totalD25);
                this.totalRetiro.setText("$" + totalR25);
                this.valorTotal.setText("$" + total25);
                break;
            case 26:
                JOptionPane.showMessageDialog(null, "Numero de cuenta inexistente o erróneo\n"
                        + "Verifique el número de Cuenta");
                break;/*
            default:
                break;*/
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new index().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Regsitrar_Empleado;
    private javax.swing.JTable Tabla;
    private javax.swing.JTextField apellidoCliente;
    private javax.swing.JButton cancelar;
    private javax.swing.JButton cancelarEmpleado;
    private javax.swing.JTextField depositante;
    private javax.swing.JTextField eApellido;
    private com.toedter.calendar.JDateChooser eFecha;
    private javax.swing.JTextField eNombre;
    public javax.swing.JComboBox<String> empleadoSeleccion;
    public javax.swing.JComboBox<String> empleadoSeleccionB;
    private com.toedter.calendar.JDateChooser fechaCliente;
    private javax.swing.JButton guardar;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton limpiarFiltros;
    private javax.swing.JTextField nombreCliente;
    private javax.swing.JTextField numeroCuenta;
    private javax.swing.JTextField numeroCuentaB;
    private javax.swing.JComboBox<String> tipoCuenta;
    private javax.swing.JComboBox<String> tipoCuentaB;
    private javax.swing.JComboBox<String> tipoTransaccion;
    private javax.swing.JComboBox<String> tipoTransaccionB;
    private javax.swing.JTextPane totalDeposito;
    private javax.swing.JTextPane totalRetiro;
    private javax.swing.JButton transaccion;
    private javax.swing.JSpinner valor;
    private javax.swing.JTextPane valorTotal;
    private javax.swing.JButton verTodo;
    // End of variables declaration//GEN-END:variables
}
